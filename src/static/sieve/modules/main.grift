(module main
  (imports streams)

  ;; `count-from n` Build a stream of integers starting from `n` and
  ;; iteratively adding 1
  (define (count-from [n : Int]) : (Rec s (Tuple Int (-> s)))
    (make-stream n (lambda () (count-from (+ 1 n)))))

  ;; `sift n st` Filter all elements in `st` that are equal to `n`.
  ;; Return a new stream.
  (define (sift [n : Int] [st : (Rec s (Tuple Int (-> s)))])
    : (Rec s (Tuple Int (-> s)))
    (let ([hd : Int (stream-first st)])
      (cond
        [(= 0 (%% hd n))
         (sift n (stream-rest st))]
        [else
         (make-stream hd (lambda () (sift n (stream-rest st))))])))

  ;; `sieve st` Sieve of Eratosthenes
  (define (sieve [st : (Rec s (Tuple Int (-> s)))])
    : (Rec s (Tuple Int (-> s)))
    (let ([hd : Int (stream-first st)])
      (make-stream hd (lambda () (sieve (sift hd (stream-rest st)))))))

  ;; stream of prime numbers
  (define primes : (Rec s (Tuple Int (-> s))) (sieve (count-from 2)))

  (define (main) : Unit
    (let ([N-1 : Int (read-int)])
      (print-int (stream-get primes N-1))
      (display-char #\newline)))

  (time (main)))
