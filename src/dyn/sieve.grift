;; Simple streams library.
;; For building and using infinite lists.

(define (stream-first [st : Dyn]) : Dyn (tuple-proj st 0))

(define (stream-rest [st : Dyn]) : Dyn ((tuple-proj st 1)))

;;--------------------------------------------------------------------------------------------------

(define (make-stream [hd : Dyn] [thunk : Dyn]) : Dyn
  (tuple hd thunk))

;; Destruct a stream into its first value and the new stream produced
;; by de-thunking the tail
(define (stream-unfold [st : Dyn]) : Dyn
  (tuple (stream-first st) (stream-rest st)))

;; [stream-get st i] Get the [i]-th element from the stream [st]
(define (stream-get [st : Dyn] [i : Dyn]) : Dyn
  ;; changed recursive loop to iterative one
  ;; because we are not performing tail call optimization.
  ;; 5x performance increase.
  (stream-first
   (repeat (i 0 i) (st : Dyn st) (stream-rest st))))

;; Use the partner file "streams.rkt" to implement the Sieve of
;; Eratosthenes.  Then compute and print the 10,000th prime number.

;;--------------------------------------------------------------------------------------------------

;; `count-from n` Build a stream of integers starting from `n` and
;; iteratively adding 1

(define (count-from [n : Dyn]) : Dyn
  (make-stream n (lambda () (count-from (+ 1 n)))))

;; `sift n st` Filter all elements in `st` that are equal to `n`.
;; Return a new stream.
(define (sift [n : Dyn] [st : Dyn]) : Dyn
  (let ([hd : Dyn (stream-first st)])
    (cond
      [(= 0 (%% hd n))
       (sift n (stream-rest st))]
      [else
       (make-stream hd (lambda () (sift n (stream-rest st))))])))

;; `sieve st` Sieve of Eratosthenes
(define (sieve [st : Dyn]) : Dyn
  (let ([hd : Dyn (stream-first st)])
    (make-stream hd (lambda () (sieve (sift hd (stream-rest st)))))))

;; stream of prime numbers
(define primes : Dyn (sieve (count-from 2)))

(define (main) : Dyn
  (let ([N-1 : Dyn (read-int)])
    (print-int (stream-get primes N-1))
    (display-char #\newline)))

(time (main))
