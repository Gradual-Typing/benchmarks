(module blackscholes
  (exports black-scholes)

  (define inv-sqrt-2x-pi : Float 0.39894228040143270286)

  (define (cummulative-normal-distribution [InputX : Float]) : Float
    (let ([sign : Bool (fl< InputX #i0.0)]
          [x-input : Float (if (fl< InputX #i0.0)
                               (fl* InputX #i-1.0)
                               InputX)])
      (let ([exp-values : Float (flexp (fl* #i-0.5 (fl* x-input x-input)))])
        (let ([n-prime-of-x : Float (fl* exp-values inv-sqrt-2x-pi)]
              [x-k2 : Float (fl/ #i1.0 (fl+ #i1.0 (fl* #i0.2316419 x-input)))])
          (let ([x-k2^2 : Float (fl* x-k2 x-k2)])
            (let ([x-k2^3 : Float (fl* x-k2^2 x-k2)])
              (let ([x-k2^4 : Float (fl* x-k2^3 x-k2)])
                (let ([x-k2^5 : Float (fl* x-k2^4 x-k2)])
                  (let ([x1 : Float (fl* 0.319381530  x-k2)]
                        [x2 : Float (fl* -0.356563782 x-k2^2)]
                        [x3 : Float (fl* 1.781477937  x-k2^3)]
                        [x4 : Float (fl* -1.821255978 x-k2^4)]
                        [x5 : Float (fl* 1.330274429  x-k2^5)])
                    (let ([x : Float (fl+ x1 (fl+ x5 (fl+ x4 (fl+ x2 x3))))])
                      (let ([x : Float (fl- #i1.0 (fl* x n-prime-of-x))])
                        (if sign (fl- #i1.0 x) x))))))))))))

  (define (black-scholes [spot : Float]
                         [strike : Float]
                         [rate : Float]
                         [volatility : Float]
                         [time : Float]
                         [option-type : Int]
                         [timet : Float])
    : Float
    (let ([log : Float (fllog (fl/ spot strike))]
          [pow : Float (fl* #i0.5 (fl* volatility volatility))]
          [den : Float (fl* volatility (flsqrt time))])
      (let ([d1 : Float (fl/ (fl+ log (fl* time (fl+ rate pow))) den)])
        (let ([d2 : Float (fl- d1 den)])
          (let ([n-of-d1 : Float (cummulative-normal-distribution d1)]
                [n-of-d2 : Float (cummulative-normal-distribution d2)]
                [fut-value : Float
                           (fl* strike (flexp (fl* #i-1 (fl* rate time))))])
            (if (= option-type 0)
                (fl- (fl* spot n-of-d1) (fl* fut-value n-of-d2))
                (fl- (fl* fut-value (fl- #i1.0 n-of-d2))
                     (fl* spot (fl- #i1.0 n-of-d1))))))))))
